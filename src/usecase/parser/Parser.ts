/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import { EvalFn, LabelResult, NumberResult } from './Values';
* import { keep } from './Keep';
* import { label } from './Label';
* import { roll } from './Roll';
* import { sum } from './Sum';
* ---
* DiceExpression := expr=expr $
* expr := Sum|Label|Keep|Roll|int
* nosumexpr := Label|Keep|Roll|int
* nosumlabelexpr := Keep|Roll|int
* Keep := raw=Roll style='kh|kl|dh|dl|k|d' amount=int
*     .evalfn = EvalFn { return keep(raw, style, amount.value); }
* Label := expr=nosumlabelexpr _ '\[' _ comment='[^\]]+' _ '\]'
*     .evalfn = EvalFn { return label(expr, comment); }
* Roll := amount=int 'd' sides=int
*     .evalfn = EvalFn { return roll(amount.value, sides.value); }
* Sum := head=nosumexpr _ tail={_ op=sumops _ expr=nosumexpr}+
*     .evalfn = EvalFn { return sum(this); }
* int := int='-?[0-9]+'
*     .value = number { return parseInt(int); }
*     .evalfn = EvalFn { return () => Promise.resolve(new NumberResult(this.value)); }
* _ := wspace*
* wspace := '\s|\n'
* sumops := '\+|-'
*/

import { EvalFn, LabelResult, NumberResult } from './Values';

import { keep } from './Keep';
import { label } from './Label';
import { roll } from './Roll';
import { sum } from './Sum';

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    DiceExpression = "DiceExpression",
    expr_1 = "expr_1",
    expr_2 = "expr_2",
    expr_3 = "expr_3",
    expr_4 = "expr_4",
    expr_5 = "expr_5",
    nosumexpr_1 = "nosumexpr_1",
    nosumexpr_2 = "nosumexpr_2",
    nosumexpr_3 = "nosumexpr_3",
    nosumexpr_4 = "nosumexpr_4",
    nosumlabelexpr_1 = "nosumlabelexpr_1",
    nosumlabelexpr_2 = "nosumlabelexpr_2",
    nosumlabelexpr_3 = "nosumlabelexpr_3",
    Keep = "Keep",
    Label = "Label",
    Roll = "Roll",
    Sum = "Sum",
    Sum_$0 = "Sum_$0",
    int = "int",
    _ = "_",
    wspace = "wspace",
    sumops = "sumops",
    $EOF = "$EOF",
}
export interface DiceExpression {
    kind: ASTKinds.DiceExpression;
    expr: expr;
}
export type expr = expr_1 | expr_2 | expr_3 | expr_4 | expr_5;
export type expr_1 = Sum;
export type expr_2 = Label;
export type expr_3 = Keep;
export type expr_4 = Roll;
export type expr_5 = int;
export type nosumexpr = nosumexpr_1 | nosumexpr_2 | nosumexpr_3 | nosumexpr_4;
export type nosumexpr_1 = Label;
export type nosumexpr_2 = Keep;
export type nosumexpr_3 = Roll;
export type nosumexpr_4 = int;
export type nosumlabelexpr = nosumlabelexpr_1 | nosumlabelexpr_2 | nosumlabelexpr_3;
export type nosumlabelexpr_1 = Keep;
export type nosumlabelexpr_2 = Roll;
export type nosumlabelexpr_3 = int;
export class Keep {
    public kind: ASTKinds.Keep = ASTKinds.Keep;
    public raw: Roll;
    public style: string;
    public amount: int;
    public evalfn: EvalFn;
    constructor(raw: Roll, style: string, amount: int){
        this.raw = raw;
        this.style = style;
        this.amount = amount;
        this.evalfn = ((): EvalFn => {
        return keep(raw, style, amount.value);
        })();
    }
}
export class Label {
    public kind: ASTKinds.Label = ASTKinds.Label;
    public expr: nosumlabelexpr;
    public comment: string;
    public evalfn: EvalFn;
    constructor(expr: nosumlabelexpr, comment: string){
        this.expr = expr;
        this.comment = comment;
        this.evalfn = ((): EvalFn => {
        return label(expr, comment);
        })();
    }
}
export class Roll {
    public kind: ASTKinds.Roll = ASTKinds.Roll;
    public amount: int;
    public sides: int;
    public evalfn: EvalFn;
    constructor(amount: int, sides: int){
        this.amount = amount;
        this.sides = sides;
        this.evalfn = ((): EvalFn => {
        return roll(amount.value, sides.value);
        })();
    }
}
export class Sum {
    public kind: ASTKinds.Sum = ASTKinds.Sum;
    public head: nosumexpr;
    public tail: Sum_$0[];
    public evalfn: EvalFn;
    constructor(head: nosumexpr, tail: Sum_$0[]){
        this.head = head;
        this.tail = tail;
        this.evalfn = ((): EvalFn => {
        return sum(this);
        })();
    }
}
export interface Sum_$0 {
    kind: ASTKinds.Sum_$0;
    op: sumops;
    expr: nosumexpr;
}
export class int {
    public kind: ASTKinds.int = ASTKinds.int;
    public int: string;
    public value: number;
    public evalfn: EvalFn;
    constructor(int: string){
        this.int = int;
        this.value = ((): number => {
        return parseInt(int);
        })();
        this.evalfn = ((): EvalFn => {
        return () => Promise.resolve(new NumberResult(this.value));
        })();
    }
}
export type _ = wspace[];
export type wspace = string;
export type sumops = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchDiceExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<DiceExpression> {
        return this.run<DiceExpression>($$dpth,
            () => {
                let $scope$expr: Nullable<expr>;
                let $$res: Nullable<DiceExpression> = null;
                if (true
                    && ($scope$expr = this.matchexpr($$dpth + 1, $$cr)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DiceExpression, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchexpr($$dpth: number, $$cr?: ErrorTracker): Nullable<expr> {
        return this.choice<expr>([
            () => this.matchexpr_1($$dpth + 1, $$cr),
            () => this.matchexpr_2($$dpth + 1, $$cr),
            () => this.matchexpr_3($$dpth + 1, $$cr),
            () => this.matchexpr_4($$dpth + 1, $$cr),
            () => this.matchexpr_5($$dpth + 1, $$cr),
        ]);
    }
    public matchexpr_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_1> {
        return this.matchSum($$dpth + 1, $$cr);
    }
    public matchexpr_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_2> {
        return this.matchLabel($$dpth + 1, $$cr);
    }
    public matchexpr_3($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_3> {
        return this.matchKeep($$dpth + 1, $$cr);
    }
    public matchexpr_4($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_4> {
        return this.matchRoll($$dpth + 1, $$cr);
    }
    public matchexpr_5($$dpth: number, $$cr?: ErrorTracker): Nullable<expr_5> {
        return this.matchint($$dpth + 1, $$cr);
    }
    public matchnosumexpr($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumexpr> {
        return this.choice<nosumexpr>([
            () => this.matchnosumexpr_1($$dpth + 1, $$cr),
            () => this.matchnosumexpr_2($$dpth + 1, $$cr),
            () => this.matchnosumexpr_3($$dpth + 1, $$cr),
            () => this.matchnosumexpr_4($$dpth + 1, $$cr),
        ]);
    }
    public matchnosumexpr_1($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumexpr_1> {
        return this.matchLabel($$dpth + 1, $$cr);
    }
    public matchnosumexpr_2($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumexpr_2> {
        return this.matchKeep($$dpth + 1, $$cr);
    }
    public matchnosumexpr_3($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumexpr_3> {
        return this.matchRoll($$dpth + 1, $$cr);
    }
    public matchnosumexpr_4($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumexpr_4> {
        return this.matchint($$dpth + 1, $$cr);
    }
    public matchnosumlabelexpr($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumlabelexpr> {
        return this.choice<nosumlabelexpr>([
            () => this.matchnosumlabelexpr_1($$dpth + 1, $$cr),
            () => this.matchnosumlabelexpr_2($$dpth + 1, $$cr),
            () => this.matchnosumlabelexpr_3($$dpth + 1, $$cr),
        ]);
    }
    public matchnosumlabelexpr_1($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumlabelexpr_1> {
        return this.matchKeep($$dpth + 1, $$cr);
    }
    public matchnosumlabelexpr_2($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumlabelexpr_2> {
        return this.matchRoll($$dpth + 1, $$cr);
    }
    public matchnosumlabelexpr_3($$dpth: number, $$cr?: ErrorTracker): Nullable<nosumlabelexpr_3> {
        return this.matchint($$dpth + 1, $$cr);
    }
    public matchKeep($$dpth: number, $$cr?: ErrorTracker): Nullable<Keep> {
        return this.run<Keep>($$dpth,
            () => {
                let $scope$raw: Nullable<Roll>;
                let $scope$style: Nullable<string>;
                let $scope$amount: Nullable<int>;
                let $$res: Nullable<Keep> = null;
                if (true
                    && ($scope$raw = this.matchRoll($$dpth + 1, $$cr)) !== null
                    && ($scope$style = this.regexAccept(String.raw`(?:kh|kl|dh|dl|k|d)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$amount = this.matchint($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Keep($scope$raw, $scope$style, $scope$amount);
                }
                return $$res;
            });
    }
    public matchLabel($$dpth: number, $$cr?: ErrorTracker): Nullable<Label> {
        return this.run<Label>($$dpth,
            () => {
                let $scope$expr: Nullable<nosumlabelexpr>;
                let $scope$comment: Nullable<string>;
                let $$res: Nullable<Label> = null;
                if (true
                    && ($scope$expr = this.matchnosumlabelexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$comment = this.regexAccept(String.raw`(?:[^\]]+)`, $$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new Label($scope$expr, $scope$comment);
                }
                return $$res;
            });
    }
    public matchRoll($$dpth: number, $$cr?: ErrorTracker): Nullable<Roll> {
        return this.run<Roll>($$dpth,
            () => {
                let $scope$amount: Nullable<int>;
                let $scope$sides: Nullable<int>;
                let $$res: Nullable<Roll> = null;
                if (true
                    && ($scope$amount = this.matchint($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:d)`, $$dpth + 1, $$cr) !== null
                    && ($scope$sides = this.matchint($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Roll($scope$amount, $scope$sides);
                }
                return $$res;
            });
    }
    public matchSum($$dpth: number, $$cr?: ErrorTracker): Nullable<Sum> {
        return this.run<Sum>($$dpth,
            () => {
                let $scope$head: Nullable<nosumexpr>;
                let $scope$tail: Nullable<Sum_$0[]>;
                let $$res: Nullable<Sum> = null;
                if (true
                    && ($scope$head = this.matchnosumexpr($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$tail = this.loop<Sum_$0>(() => this.matchSum_$0($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = new Sum($scope$head, $scope$tail);
                }
                return $$res;
            });
    }
    public matchSum_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Sum_$0> {
        return this.run<Sum_$0>($$dpth,
            () => {
                let $scope$op: Nullable<sumops>;
                let $scope$expr: Nullable<nosumexpr>;
                let $$res: Nullable<Sum_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$op = this.matchsumops($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$expr = this.matchnosumexpr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Sum_$0, op: $scope$op, expr: $scope$expr};
                }
                return $$res;
            });
    }
    public matchint($$dpth: number, $$cr?: ErrorTracker): Nullable<int> {
        return this.run<int>($$dpth,
            () => {
                let $scope$int: Nullable<string>;
                let $$res: Nullable<int> = null;
                if (true
                    && ($scope$int = this.regexAccept(String.raw`(?:-?[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new int($scope$int);
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.loop<wspace>(() => this.matchwspace($$dpth + 1, $$cr), true);
    }
    public matchwspace($$dpth: number, $$cr?: ErrorTracker): Nullable<wspace> {
        return this.regexAccept(String.raw`(?:\s|\n)`, $$dpth + 1, $$cr);
    }
    public matchsumops($$dpth: number, $$cr?: ErrorTracker): Nullable<sumops> {
        return this.regexAccept(String.raw`(?:\+|-)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchDiceExpression(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchDiceExpression(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchDiceExpression(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<DiceExpression>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}